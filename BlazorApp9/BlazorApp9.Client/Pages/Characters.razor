@page "/characters"
@using BlazorApp9.Client.Models
@using BlazorApp9.Client.Services
@inject RickAndMortyService RickAndMortyService
@inject NotificationService RadzenNotificationService
@inject DialogService DialogService

<PageTitle>Characters</PageTitle>

<h3>Characters</h3>

<RadzenButton Text="Create New" Click="@(args => OpenCreatePopup())" Icon="add_circle" Style="margin-bottom: 10px;" />

<RadzenDataGrid Data="@characters" TItem="Character" ColumnWidth="200px" AllowPaging="true" PageSize="10" AllowFiltering="true" AllowSorting="true">
    <Columns>
        <RadzenDataGridColumn TItem="Character" Property="Id" Title="ID" />
        <RadzenDataGridColumn TItem="Character" Property="Name" Title="Name" />
        <RadzenDataGridColumn TItem="Character" Property="Status" Title="Status" />
        <RadzenDataGridColumn TItem="Character" Property="Species" Title="Species" />
        <RadzenDataGridColumn TItem="Character" Property="Type" Title="Type" />
        <RadzenDataGridColumn TItem="Character" Property="Gender" Title="Gender" />
        <RadzenDataGridColumn TItem="Character" Title="Origin">
            <Template Context="character">
                @character.Origin?.Name
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Character" Title="Location">
            <Template Context="character">
                @character.Location?.Name
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Character" Title="Image">
            <Template Context="character">
                <img src="@character.Image" alt="@character.Name" width="50" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Character" Title="Actions">
            <Template Context="character">
                <RadzenButton Icon="edit" Click="@(args => EditCharacter(character))" Style="margin-right: 10px;" />
                <RadzenButton Icon="delete" Click="@(args => ConfirmDeleteCharacter(character))" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    private List<Character> characters;
    private Character currentCharacter;
    private bool isDialogVisible = false;

    protected override async Task OnInitializedAsync()
    {
        var response = await RickAndMortyService.GetCharactersAsync();
        characters = response?.Results ?? new List<Character>();
    }

    private async Task OpenCreatePopup()
    {
        var newCharacter = new Character
            {
                Origin = new Origin(),
                Location = new Location()
            };
        var result = await DialogService.OpenAsync<CharacterDialog>(
            "Create Character",
            new Dictionary<string, object> { { "Character", newCharacter }, { "Characters", characters } },
            new DialogOptions { Width = "500px", Height = "auto", CloseDialogOnOverlayClick = true }
        );

        if (result != null)
        {
            characters.Add(result);
            StateHasChanged();
            RadzenNotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Success",
                    Detail = "Character created successfully"
                });
        }
    }

    private async Task EditCharacter(Character character)
    {
        var result = await DialogService.OpenAsync<CharacterDialog>(
            "Edit Character",
            new Dictionary<string, object> { { "Character", character }, { "Characters", characters } },
            new DialogOptions { Width = "500px", Height = "auto", CloseDialogOnOverlayClick = true }
        );

        if (result != null)
        {
            var index = characters.FindIndex(c => c.Id == result.Id);
            if (index >= 0)
            {
                characters[index] = result;
                StateHasChanged();
                RadzenNotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Success",
                        Detail = "Character updated successfully"
                    });
            }
        }
    }

    private async Task ConfirmDeleteCharacter(Character character)
    {
        var confirmed = await DialogService.Confirm("Are you sure you want to delete this character?", "Delete Character");

        if (confirmed == true)
        {
            DeleteCharacter(character);
        }
    }

    private void DeleteCharacter(Character character)
    {
        characters = characters.Where(c => c.Id != character.Id).ToList();
        StateHasChanged();
        RadzenNotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Success",
                Detail = "Character deleted successfully"
            });
    }
}
